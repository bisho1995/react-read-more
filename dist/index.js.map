{"version":3,"file":"index.js","sources":["../src/ReadMore.tsx","../src/withReadMore.tsx"],"sourcesContent":["/**\n * @author Bisvarup Mukherjee\n * @date 23/05/2020\n */\n\nimport React, { useState, useRef, useEffect } from 'react'\n\nexport interface Props {\n  children: React.ReactNode\n  readMoreText?: React.ReactNode\n  lineHeight?: number\n  height?: number\n  unit?: string\n  readMoreClass?: string\n  readMoreClick?: (e: Event) => void\n  readMoreStyles?: { [x: string]: string }\n}\n\n/**\n * Wrap any component with this component to show a read more text. On clicking\n * the read more text user will be able to see the full content. On full content\n * is shown it cannot be reverted back.\n *\n * There is also a withReadMore HOC wrapper along with this file. They do the same thing\n * and usage depends on the choice of the user\n *\n * children: ReactNode - The component which you want to show an excerpt of.\n * readMoreText: ReactNode - The default value is '...see more' you may want to change this\n * lineHeight: Number - The line height size, default '1'\n * height: Number - The height of the excerpt to be shown initially, default '5'\n * unit: String - Unit of line height, by default it is 'rem'\n * readMoreClass: String - Optionally add classes to the read more label, default is ''\n * readMoreClick: function - Optionally do something on the click of read more, default noop\n * readMoreStyles: Object - Support for styles of read more, default {}\n * @param param0 props\n */\nexport default function ReadMore({\n  children,\n  readMoreText = '...see more',\n  lineHeight = 1,\n  height = 5,\n  unit = 'rem',\n  readMoreClass = '',\n  readMoreClick = () => {},\n  readMoreStyles = {}\n}: Props) {\n  const [showReadMore, setShowReadMore] = useState(true)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const readMoreRef = useRef<HTMLDivElement>(null)\n\n  const handleReadMoreClick = (e: any) => {\n    setShowReadMore(false)\n    readMoreClick(e)\n  }\n\n  useEffect(() => {\n    if (!showReadMore || !containerRef.current || !readMoreRef?.current) return\n    const divHeight =\n      containerRef?.current?.clientHeight + containerRef?.current?.offsetTop\n    const refHeight =\n      readMoreRef?.current?.offsetTop + readMoreRef?.current?.clientHeight\n\n    if (refHeight >= divHeight) setShowReadMore(false)\n  }, [containerRef, readMoreRef, showReadMore])\n\n  if (!showReadMore) return children\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        overflow: 'hidden',\n        lineHeight: `${lineHeight}${unit}`,\n        height: `${height}${unit}`\n      }}\n    >\n      <div ref={containerRef}>{children}</div>\n      <div\n        className={readMoreClass}\n        onClick={handleReadMoreClick}\n        style={{\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n          cursor: 'pointer',\n          background: '#fff',\n          fontSize: `${lineHeight}${unit}`,\n          lineHeight: `${lineHeight}${unit}`,\n          ...readMoreStyles\n        }}\n        ref={readMoreRef}\n      >\n        {readMoreText}\n      </div>\n    </div>\n  )\n}\n","/**\n * @author Bisvarup Mukherjee\n * @date 23/05/2020\n */\n\nimport React from 'react'\nimport ReadMore from './ReadMore'\n\n/**\n * This is the HOC version of ReadMore component.\n * Usage: 'export default withReadMore(MyComponent)'\n *\n *\n * @param Component ReactNode - The component which you want to wrap around\n * @param readMoreProps Object - Entire prop list supported by the ReadMore component\n */\nexport default function withReadMore(\n  Component: typeof React.Component,\n  readMoreProps = {}\n) {\n  return (props: any[]) => (\n    // @ts-ignore\n    <ReadMore {...readMoreProps}>\n      <Component {...props} />\n    </ReadMore>\n  )\n}\n"],"names":["ReadMore","children","readMoreText","lineHeight","height","unit","readMoreClass","readMoreClick","readMoreStyles","useState","showReadMore","setShowReadMore","containerRef","useRef","readMoreRef","handleReadMoreClick","e","useEffect","current","divHeight","clientHeight","offsetTop","refHeight","React","style","position","overflow","ref","className","onClick","bottom","right","cursor","background","fontSize","withReadMore","Component","readMoreProps","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;SAoCwBA;MACtBC,gBAAAA;+BACAC;MAAAA,8CAAe;6BACfC;MAAAA,0CAAa;yBACbC;MAAAA,kCAAS;uBACTC;MAAAA,8BAAO;gCACPC;MAAAA,gDAAgB;gCAChBC;MAAAA,gDAAgB;iCAChBC;MAAAA,kDAAiB;;kBAEuBC,cAAQ,CAAC,IAAD;MAAzCC;MAAcC;;AACrB,MAAMC,YAAY,GAAGC,YAAM,CAAiB,IAAjB,CAA3B;AACA,MAAMC,WAAW,GAAGD,YAAM,CAAiB,IAAjB,CAA1B;;AAEA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,CAAD;AAC1BL,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAJ,IAAAA,aAAa,CAACS,CAAD,CAAb;AACD,GAHD;;AAKAC,EAAAA,eAAS,CAAC;;;AACR,QAAI,CAACP,YAAD,IAAiB,CAACE,YAAY,CAACM,OAA/B,IAA0C,EAACJ,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEI,OAAd,CAA9C,EAAqE;AACrE,QAAMC,SAAS,GACb,CAAAP,YAAY,SAAZ,IAAAA,YAAY,WAAZ,qCAAAA,YAAY,CAAEM,OAAd,gFAAuBE,YAAvB,KAAsCR,YAAtC,aAAsCA,YAAtC,iDAAsCA,YAAY,CAAEM,OAApD,2DAAsC,uBAAuBG,SAA7D,CADF;AAEA,QAAMC,SAAS,GACb,CAAAR,WAAW,SAAX,IAAAA,WAAW,WAAX,oCAAAA,WAAW,CAAEI,OAAb,8EAAsBG,SAAtB,KAAkCP,WAAlC,aAAkCA,WAAlC,gDAAkCA,WAAW,CAAEI,OAA/C,0DAAkC,sBAAsBE,YAAxD,CADF;AAGA,QAAIE,SAAS,IAAIH,SAAjB,EAA4BR,eAAe,CAAC,KAAD,CAAf;AAC7B,GARQ,EAQN,CAACC,YAAD,EAAeE,WAAf,EAA4BJ,YAA5B,CARM,CAAT;AAUA,MAAI,CAACA,YAAL,EAAmB,OAAOT,QAAP;AAEnB,SACEsB,4BAAA,MAAA;AACEC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,QAAQ,EAAE,QAFL;AAGLvB,MAAAA,UAAU,OAAKA,UAAL,GAAkBE,IAHvB;AAILD,MAAAA,MAAM,OAAKA,MAAL,GAAcC;AAJf;GADT,EAQEkB,4BAAA,MAAA;AAAKI,IAAAA,GAAG,EAAEf;GAAV,EAAyBX,QAAzB,CARF,EASEsB,4BAAA,MAAA;AACEK,IAAAA,SAAS,EAAEtB;AACXuB,IAAAA,OAAO,EAAEd;AACTS,IAAAA,KAAK;AACHC,MAAAA,QAAQ,EAAE,UADP;AAEHK,MAAAA,MAAM,EAAE,CAFL;AAGHC,MAAAA,KAAK,EAAE,CAHJ;AAIHC,MAAAA,MAAM,EAAE,SAJL;AAKHC,MAAAA,UAAU,EAAE,MALT;AAMHC,MAAAA,QAAQ,OAAK/B,UAAL,GAAkBE,IANvB;AAOHF,MAAAA,UAAU,OAAKA,UAAL,GAAkBE;AAPzB,OAQAG,cARA;AAULmB,IAAAA,GAAG,EAAEb;GAbP,EAeGZ,YAfH,CATF,CADF;AA6BD;;SChFuBiC,aACtBC,WACAC;MAAAA;AAAAA,IAAAA,gBAAgB;;;AAEhB,SAAO,UAACC,KAAD;AAAA,WAELf,4BAAA,CAACvB,QAAD,oBAAcqC,cAAd,EACEd,4BAAA,CAACa,SAAD,oBAAeE,MAAf,CADF,CAFK;AAAA,GAAP;AAMD;;;;;"}